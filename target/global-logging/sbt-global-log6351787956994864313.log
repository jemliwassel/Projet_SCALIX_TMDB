[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\BESTPC~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\BESTPC~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 17.0.4.1)
[debug]       Load.loadUnit: plugins took 133.9906ms
[debug]       Load.loadUnit: defsScala took 1.371ms
[debug] [Loading] Scanning directory C:\Users\Best Pc Shop\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Best Pc Shop\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.9982 ms
[debug]           Load.resolveProject(global-plugins) took 47.4982ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Best Pc Shop\.sbt\1.0\plugins, plugins: List(<none>))) took 100.0678ms
[debug] [Loading] Done in C:\Users\Best Pc Shop\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 140.0423ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2376ms
[debug]     Load.loadUnit(file:/C:/Users/Best%20Pc%20Shop/.sbt/1.0/plugins/, ...) took 291.3084ms
[debug]   Load.apply: load took 511.8305ms
[debug]   Load.apply: resolveProjects took 10.4894ms
[debug]   Load.apply: finalTransforms took 63.6786ms
[debug]   Load.apply: config.delegates took 11.3356ms
[debug]   Load.apply: Def.make(settings)... took 443.9575ms
[debug]   Load.apply: structureIndex took 106.4618ms
[debug]   Load.apply: mkStreams took 2.3085ms
[info] loading global plugins from C:\Users\Best Pc Shop\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2827.1857ms
[debug]           Load.loadUnit: plugins took 42.233ms
[debug]           Load.loadUnit: defsScala took 0.011ms
[debug] [Loading] Scanning directory C:\Users\Best Pc Shop\IdeaProjects\movie_project\project
[debug]             Load.loadUnit: mkEval took 12.3649ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Best Pc Shop\IdeaProjects\movie_project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.1227 ms
[info] loading settings for project movie_project-build from idea.sbt ...
[debug]               Load.resolveProject(movie_project-build) took 4.4599ms
[debug]             Load.loadTransitive: finalizeProject(Project(id movie_project-build, base: C:\Users\Best Pc Shop\IdeaProjects\movie_project\project, plugins: List(<none>))) took 7.2248ms
[debug] [Loading] Done in C:\Users\Best Pc Shop\IdeaProjects\movie_project\project, returning: (movie_project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2787.8132ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.6273ms
[debug]         Load.loadUnit(file:/C:/Users/Best%20Pc%20Shop/IdeaProjects/movie_project/project/, ...) took 2835.9327ms
[debug]       Load.apply: load took 2837.8153ms
[debug]       Load.apply: resolveProjects took 0.109ms
[debug]       Load.apply: finalTransforms took 7.916ms
[debug]       Load.apply: config.delegates took 0.5368ms
[debug]       Load.apply: Def.make(settings)... took 76.6287ms
[debug]       Load.apply: structureIndex took 30.5129ms
[debug]       Load.apply: mkStreams took 0.002ms
[info] loading project definition from C:\Users\Best Pc Shop\IdeaProjects\movie_project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4181.6268ms
[debug]     Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\Best Pc Shop\IdeaProjects\movie_project
[debug]       Load.loadUnit: mkEval took 0.4049ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2396 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 35.8313ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Best Pc Shop\IdeaProjects\movie_project, plugins: List(<none>))) took 40.2932ms
[debug] [Loading] Done in C:\Users\Best Pc Shop\IdeaProjects\movie_project, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1958.1198ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.7836ms
[debug]   Load.loadUnit(file:/C:/Users/Best%20Pc%20Shop/IdeaProjects/movie_project/, ...) took 6160.4892ms
[debug] Load.apply: load took 6162.3803ms
[debug] Load.apply: resolveProjects took 0.1249ms
[debug] Load.apply: finalTransforms took 21.5915ms
[debug] Load.apply: config.delegates took 0.3312ms
[debug] Load.apply: Def.make(settings)... took 75.7499ms
[debug] Load.apply: structureIndex took 24.6602ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to movie_project (in build file:/C:/Users/Best%20Pc%20Shop/IdeaProjects/movie_project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58571 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58571, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to movie_project (in build file:/C:/Users/Best%20Pc%20Shop/IdeaProjects/movie_project/)
[debug] > Exec(idea-shell, None, None)
